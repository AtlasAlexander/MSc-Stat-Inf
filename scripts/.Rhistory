library(gapminder)
str(gapminder)
# Statistical Inference
# Week 1
# Exploring gapminder data
# Make syre you have the following packages installed:
# ggplot2
# dplyr
# scales
# gapminder
# Run the following code, which double-checks that you have the packages installed,
# and loads them into the R session.
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
if(!require(dplyr)){install.packages("dplyr")}
library(dplyr)
if(!require(scales)){install.packages("scales")}
library(scales)
if(!require(gapminder)){install.packages("gapminder")}
library(gapminder)
# The data for today is loaded automatically by the gapminder package
# Let's find out what variables are available, and what are their names?
# The function str() is your friend here.
str(gapminder)
# Tech note: The gapminder data set was constructed as a tibble, a generalization of a data.frame.
# The default print() method gives an abbreviated printout. Normally, you would use head(gapminder) for this.
gapminder
head(gapminder)
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
# Task 4
# As a group, try to create some 2-d visualisations in R.
# Task 5 [Advanced, Optional]
# Try to create some 3-d (or even 4-d) visualisations in R.
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
if(!require(dplyr)){install.packages("dplyr")}
library(dplyr)
if(!require(scales)){install.packages("scales")}
library(scales)
if(!require(gapminder)){install.packages("gapminder")}
library(gapminder)
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(
data = gapminder)
ggplot(
data = gapminder)
str(gapminder)
ggplot(
data = gapminder
mapping = aes(x=year , y =lifeExp))
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(
data = gapminde,
mapping = aes(x=year , y =lifeExp))
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(
data = gapminder,
mapping = aes(x=year , y =lifeExp))
geom_bar()
+
geom_bar()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(data = gapminder, mapping = aes(x=year , y =lifeExp)) + geom_bar()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(data = gapminder, mapping = aes(x=year , y =lifeExp)) + geom_point()
ggplot(data = gapminder, mapping = aes(x=year , y =lifeExp)) + geom_bar()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(data = gapminder, mapping = aes(x=year)) + geom_bar()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_bar()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_boxplot()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x=gdpPercap ,y=lifeExp)) + geom_point
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x=gdpPercap ,y=lifeExp)) + geom_point()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp,y=gdpPercap)) + geom_point()
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
# 1D Graph (Histogram) of life expectancy
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_boxplot()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp,y=gdpPercap)) + geom_point()
gapminder
# Task 3
# As a group, try to create some 1-d visualisations in R.
# The Dewis task (boxplots and histograms) will help with some basic interpretation of the most useful and common 1-d visualisations used.
# 1D Graph (Histogram) of life expectancy
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_boxplot()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp,y=gdpPercap , color=continent) + geom_point()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp,y=gdpPercap , color=continent)) + geom_point()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point()
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = continent_colors)
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = aes(continent_colors))
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = aes(color =continent_colors))
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = aes(color = continent))
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = aes(color = continent, shape = continent))
geom_smooth(method = "lm")
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap)) + geom_point(mapping = aes(color = continent, shape = continent))
geom_smooth(method = "lm")
geom_smooth(method = "em")
+ geom_smooth(method = "em")
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(method = "em")
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(method = "lm")
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(method = "se")
lm
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(method = "lm")
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(se = false)
# Task 4
# As a group, try to create some 2-d visualisations in R.
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(se = FALSE)
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_smooth(se = FALSE)
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(se = FALSE)
source("~/MSc Artificial Intellegence/MSc-Stat-Inf/scripts/Week1_script.R")
newdata <- log(gapminder)
# Task 5 [Advanced, Optional]
# Try to create some 3-d (or even 4-d) visualisations in R.
newdata <- log(gapminder.lifeExp)
# Task 5 [Advanced, Optional]
# Try to create some 3-d (or even 4-d) visualisations in R.
newdata <- log(gapminder(lifeExp))
newdata <- log(gapminder(lifeExp))
# Task 5 [Advanced, Optional]
# Try to create some 3-d (or even 4-d) visualisations in R.
newdata <- log(gapminder[lifeExp])
ggplot(data = gapminder, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_smooth(se = FALSE)
gapminder |> mutate(across(is.numeric, log))
ggplot(newdata, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(se = FALSE)
newdata = gapminder |> mutate(across(is.numeric, log))
ggplot(newdata, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(se = FALSE)
ggplot(newdata, mapping = aes(x= lifeExp, y=gdpPercap))  +
geom_point(mapping = aes(color = continent, shape = continent)) +
geom_smooth(method = "lm")
knitr::opts_chunk$set(echo = TRUE) # do not change this option, this shows the code in your knitted document
str(mtcars)
ggplot(data=mtcars,aes(cyl)) + geom_boxplot()
ggplot(data=mtcars,aes(x=cyl)) + geom_boxplot()
head(mtcars)
ggplot(mtcars,aes(mpg))+geom_histogram(binwidth = 4)+xlab("Miles per Gallon")+ylab("Number of Cars")+ggtitle("Distribution of Cars by Mileage")
ggplot(mtcars, aes(x = "", y = mpg)) +
geom_boxplot(fill = "skyblue", color = "blue") +
labs(title = "Boxplot of MPG from mtcars Dataset",
y = "Miles per Gallon (mpg)") +
theme_minimal()
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
ggplot(mtcars, aes(x = "", y = mpg)) +
geom_boxplot(fill = "skyblue", color = "blue") +
labs(title = "Boxplot of MPG from mtcars Dataset",
y = "Miles per Gallon (mpg)") +
theme_minimal()
ggplot(data=mtcars,aes(x="", y=cyl)) + geom_boxplot()
ggplot(data=mtcars,aes(x=cyl)) + geom_boxplot()
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
head(mtcars)
ggplot(data=mtcars,aes(x=mpg)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
knitr::opts_chunk$set(echo = TRUE)
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
library(readr)
install.packages("readr")
library(readr)
week2data <- read_csv("\\nstu-nas01.uwe.ac.uk\users1$\a2-almuaini\Personal\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
knitr::opts_chunk$set(echo = TRUE)
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
library(readr)
week2data <- read_csv("\\nstu-nas01.uwe.ac.uk\users1$\a2-almuaini\Personal\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
library(readr)
week2data <- read_csv("~/MSc Artificial Intellegence/MSc-Stat-Inf/Data/week2data.csv")
View(week2data)
library(readr)
week2data <- read_csv("~\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
library(readr)
week2data <- read_csv("~/MSc Artificial Intellegence/MSc-Stat-Inf/Data/week2data.csv"")
dem_score
View(week2data)
View(newdata)
View(week2data)
library(readr)
head(week2data)
library(readr)
head(week2data)
ggplot(data = week2data, mapping = aes(x=x)) + geom_boxplot()
setwd("~/MSc Artificial Intellegence/MSc-Stat-Inf/scripts")
library(readr)
dataset <- read.csv("\\nstu-nas01.uwe.ac.uk\users1$\a2-almuaini\Personal\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
library(readr)
dataset <- read.csv("\\nstu-nas01.uwe.ac.uk\\users1$\a2-almuaini\Personal\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
library(readr)
dataset <- read.csv("\\nstu-nas01.uwe.ac.uk\\users1$\a2-almuaini\\Personal\MSc Artificial Intellegence\MSc-Stat-Inf\Data\week2data.csv")
library(readr)
dataset <- read.csv("\\nstu-nas01.uwe.ac.uk\\users1$\a2-almuaini\\Personal\\MSc Artificial Intellegence\\MSc-Stat-Inf\\Data\\week2data.csv")
library(readr)
dataset <- read_csv("\\nstu-nas01.uwe.ac.uk\\users1$\a2-almuaini\\Personal\\MSc Artificial Intellegence\\MSc-Stat-Inf\\Data\\week2data.csv")
library(readr)
dataset <- read_csv("~\MSc Artificial Intellegence\\MSc-Stat-Inf\\Data\\week2data.csv")
library(readr)
dataset <- read_csv("~\\MSc Artificial Intellegence\\MSc-Stat-Inf\\Data\\week2data.csv")
library(readr)
dataset <- read.csv("~\\MSc Artificial Intellegence\\MSc-Stat-Inf\\Data\\week2data.csv")
library(readr)
dataset <- read.csv("../Data/week2data.csv")
str(mtcars)
ggplot(data = dataset, mapping = aes(x=x)) + geom_boxplot(fill = "skyblue", color = "blue")
View(week2data)
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_boxplot()
gapminder
if(!require(ggplot2)){install.packages("ggplot2")}
library(ggplot2)
if(!require(dplyr)){install.packages("dplyr")}
library(dplyr)
if(!require(scales)){install.packages("scales")}
library(scales)
if(!require(gapminder)){install.packages("gapminder")}
library(gapminder)
# The data for today is loaded automatically by the gapminder package
# Let's find out what variables are available, and what are their names?
# The function str() is your friend here.
str(gapminder)
# Tech note: The gapminder data set was constructed as a tibble, a generalization of a data.frame.
# The default print() method gives an abbreviated printout. Normally, you would use head(gapminder) for this.
gapminder
head(gapminder)
ggplot(data = gapminder, mapping = aes(x=lifeExp)) + geom_boxplot()
ggplot(data = dataset, mapping = aes(x=x)) + geom_boxplot(fill = "skyblue", color = "blue")
ggplot(data = dataset, mapping = aes(x=x)) + geom_boxplot(fill = "skyblue", color = "blue")
ggplot(data = dataset, mapping = aes(x=x)) + geom_boxplot(fill = "skyblue", color = "blue")+
labs(title = "Boxplot IQ post new Medication",
y = "IQ")
ggplot(data = dataset, mapping = aes(y=x)) + geom_boxplot(fill = "skyblue", color = "blue")+
labs(title = "Boxplot IQ post new Medication",
y = "IQ")
ggplot(data = dataset, mapping = aes(y=x)) + geom_boxplot(fill = "skyblue", color = "blue")+
labs(title = "Boxplot IQ post new Medication",
y = "IQ", x="Variable x")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
setwd("~/MSc Artificial Intellegence/MSc-Stat-Inf/scripts")
plot(pressure)
summary(mtcars)
str(mtcars)
head(mtcars)
